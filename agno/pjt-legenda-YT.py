# ------------------------------
# Imports e Configura√ß√µes
# ------------------------------
from dotenv import load_dotenv
import os
import shutil
import yt_dlp
import whisper
from pydantic import BaseModel
from youtube_transcript_api import YouTubeTranscriptApi, VideoUnavailable, TranscriptsDisabled, NoTranscriptFound
from agno.agent import Agent
from agno.models.openai import OpenAIChat

load_dotenv()
API_KEY = os.getenv("OPENAI_API_KEY")

agent = Agent(
    model=OpenAIChat(id="gpt-4o-mini", api_key=API_KEY),
    show_tool_calls=True,
)

# ------------------------------
# Fun√ß√µes auxiliares
# ------------------------------
def checar_ffmpeg():
    if shutil.which("ffmpeg") is None or shutil.which("ffprobe") is None:
        print("‚ö†Ô∏è FFmpeg ou FFprobe n√£o encontrados no PATH.")
        return False
    return True

# ------------------------------
# Defini√ß√£o do estado
# ------------------------------
class VideoState(BaseModel):
    url: str
    texto: str = ""   # legenda ou transcri√ß√£o
    resumo: str = ""  # resumo final

# ------------------------------
# Fun√ß√µes do fluxo
# ------------------------------
def tentar_legenda(state: VideoState):
    print("\nüîé Tentando pegar legenda do v√≠deo...")
    try:
        video_id = state.url.split("v=")[-1].split("&")[0]
        transcript_list = YouTubeTranscriptApi.get_transcript(video_id, languages=['pt', 'en'])
        state.texto = " ".join([t['text'] for t in transcript_list])
        print("‚úÖ Legendas encontradas.")
    except VideoUnavailable:
        print("‚ùå V√≠deo indispon√≠vel.")
        state.texto = ""
    except TranscriptsDisabled:
        print("‚ùå Legendas desativadas pelo autor do v√≠deo.")
        state.texto = ""
    except NoTranscriptFound:
        print("‚ùå Nenhuma legenda encontrada para este v√≠deo.")
        state.texto = ""
    except Exception as e:
        print(f"[Erro tentar_legenda]: {e}")
        state.texto = ""
    return state

def usar_whisper(state: VideoState):
    if state.texto:
        print("‚ÑπÔ∏è Legenda j√° encontrada, n√£o √© necess√°rio usar Whisper.")
        return state

    if not checar_ffmpeg():
        state.texto = "N√£o foi poss√≠vel usar Whisper pois FFmpeg/FFprobe n√£o est√£o no PATH."
        return state

    print("üéôÔ∏è Usando Whisper para transcri√ß√£o do √°udio...")
    audio_path = "video_audio.wav"
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'video_audio.%(ext)s',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'wav',
            'preferredquality': '192',
        }],
    }
    try:
        print("‚¨áÔ∏è Baixando √°udio do v√≠deo...")
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([state.url])

        print("üìù Transcrevendo √°udio com Whisper...")
        model = whisper.load_model("base")
        result = model.transcribe(audio_path)
        state.texto = result["text"]
        print("‚úÖ Transcri√ß√£o conclu√≠da.")
    except Exception as e:
        print(f"[Erro usar_whisper]: {e}")
        state.texto = "N√£o foi poss√≠vel obter a transcri√ß√£o."
    return state

def resumir(state: VideoState):
    if not state.texto:
        state.resumo = "N√£o h√° texto para resumir."
        return state

    print("üìù Resumindo o conte√∫do...")
    try:
        resumo = agent.run(f"Resuma o seguinte texto:\n\n{state.texto}")
        # Se o retorno tiver atributo 'content', pega s√≥ o texto
        if hasattr(resumo, "content"):
            state.resumo = resumo.content
        else:
            state.resumo = resumo
        print("‚úÖ Resumo conclu√≠do.")
    except Exception as e:
        print(f"[Erro resumir]: {e}")
        state.resumo = "Erro ao resumir o texto."
    return state

# ------------------------------
# Fun√ß√£o principal
# ------------------------------
def executar_fluxo(url_video: str):
    print("\n‚ñ∂Ô∏è Iniciando processamento do v√≠deo...")
    estado = VideoState(url=url_video)

    # 1Ô∏è‚É£ tentar legenda
    estado = tentar_legenda(estado)

    # 2Ô∏è‚É£ fallback para Whisper
    estado = usar_whisper(estado)

    # 3Ô∏è‚É£ resumir
    estado = resumir(estado)

    # ‚úÖ resultado final
    print("\n‚úÖ Resumo final:\n")
    print(estado.resumo)

# ------------------------------
# Main
# ------------------------------
if __name__ == "__main__":
    url_video = input("Digite a URL do v√≠deo do YouTube: ")
    executar_fluxo(url_video)


